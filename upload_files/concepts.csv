Concept,Description,"Reteach Message (should be formatted as if handing it to Python print(), 80 characters wide)",Author (responsible person),Msg Status,Lab first appear,Count in Tag to Concept Master,Tags,
And,"Understands how the ""and"" operator works in Python","""|and| either returns the first false value evaluated in an expression or the\nlast value of that expression if all the operands are true.""",,Finalized,1,4,"AndDsntShrtCir, AndShrtCirTruthy, BoolExprRtnBool, SwapAndOr, ",
Assignment,Understands how the = is used to assign a value on the right to the name on the left and what the Python interpreter displays when this is done,"""An assignment statement first evaluates the expression on the right side of the\n|=| operator to get a value. This value is then bound to the name on the left\nside of the |=| in the first frame in the current environment. For example,\nwhile |a = 0| displays nothing, |a == 0| displays |True|. Notice that Python\ndistinguishes assignment |=| from equality comparison |==|.""",Krishna,Finalized,1,4,"AssignNameOfFnToVarWhenCallExpr, AssignStmtIsEquals, AssignStmtRtnVal, BindVarToVarName, ",
BooleanFalseyValues,Understands what values in Python are falsey.,"""In Python, there are several values that are considered false-y such that in\ntheir interactions with other values in a boolean expression, they functionally\nevaluate as False. These values are: |False|, |None|, |0| (all other integers\nare True), |\'\'|, |()|, |[]|, and |{}| (or any other empty Data Structure).""",Krishna,Finalized,1,2,"FalseyIsTruthy, NonZeroIsFalsey, ",
BooleanRepresentation,"Understands that there are true booleans in Python as opposed to the ""hack"" of binary 0 and 1.","""In Python there are boolean primitives |True| and |False| as opposed to prior\nlanguages that use |1| and |0|.""",Krishna,Finalized,1,1,"BoolIsBinary, ",
BoolOrderOfOperations,Order of operations for booleans,"""In Python, just like with arithmetic operators, there is a specific order of\noperations for boolean operators. Evaluating from left to right, expressions\nwithin parentheses have the highest priority, followed by |not|, then |and|,\nand False or finally by |or|. For example, |True and False or not False| is \nevaluated as |(True and False) or (not False))| which is |True|.""",Krishna,Finalized,1,1,"WrnBoolOpPrecedence, ",
DivisionType,Understands the difference between floating point division and floor (integer) division,"""Python has two division operators: |/| and |//|. |/| is traditional division, it\nresults in a decimal value. For example, |8 / 4| evaluates to |2.0|. |//| floors\nthe result down to an integer. Also, if one of the operands is negative, the\nresult is rounded *towards* negative infinity. For example, |5 // 4| evaluates\nto |1| and |-5 // 4| evaluates to |-2|.""",Kelly,Finalized,1,3,"FloorDivIsDivTwice, NFloorDivNIsWeird, SwapFloorDivTrueDiv, ",
EvalBool,"Understands that when evaluating a boolean expression it results in a particular value and does not include portions of the boolean logic like not, and, and or.","""When evaluating a boolean expression, it is completely evaluated such that there\nare no boolean operators left. For example, |False and not True or 3| becomes\n|False and False or 3| then |False or 3| and finally |3|.""",Krishna,Finalized,1,1,"NoEvalBool, ",
EvalExpr,Understands when to evaluate an expression,"""An expression is a combination of values, variables, operators, and functions\nthat a programming language interprets and evaluates to the simplest value.\nExpression are evaluated upon hitting \""Enter\"" or \""Return\"". Primitive values\n(e.g. |1| or |\""hello\""|) evaluate to themselves, while expressions are evaluated\nbased on the values, variables, operators, and functions it is made up of.""",Kelly,Finalized,1,1,"NoEvalExpr, ",
EvalVar,Understands how to evaluate variables when they are used,"""A variable is evaluated to the value it was assigned. If it was not assigned\nprior to being evaluated a NameError is raised.""",Kelly,Finalized,1,2,"BindVarToVarName, VarEvalIsEmptyVal, ",
IfClause,The three parts to an if clause (if...elif...else). Maybe including how two ifs near each other do not affect each other's behavior,"""A conditional statement consists of a series of headers and suites: a required\n|if| clause, an optional sequence of |elif| clauses, and finally an optional\n|else| clause. To execute a conditional clause, each clause is considered in\norder: (1) Evaluate the header's expression. (2) If it is a true value, execute\nthe suite. Then, skip over all subsequent clauses in the conditional statement.\n(3) If the |else| clause is reached, only its suite is executed.""",Krishna,Finalized,1,2,"IfElseIsIfIf, IfIfIsIfElse, ",
ListIndexing,List indexing starts at 0 and what is returned from indexing into a list.,"""When indexing into a list, we start counting at 0. This means to get the first\nelement we must use the index zero. For example, in this list |x = [1, 2, 3]| to\nget |1| use |x[0]|. Notice that the value returned is only the element at that\nindex.""",,Finalized,1,5,"LstIndxingRtnLst, LstIndxStartAtOne, LstIndxUseCommas, LstIndxUseNestBrackets, NestedLstIsFlat, ",
NegativeNumbers,Understands that Python can represent negative numbers and how they are represented,"""In Python negative numbers are represented with a negative sign in front of the\nnumber. Therefore the negative value of |10| is represented as |-10|.""",Krishna,Finalized,1,1,"NegNumNotValid, ",
Not,"Understands not negates proceeding boolean expression, may be paired with keywords","""The boolean |not| operator is used to negate the boolean value of its operand.\nIt can also be paired with operators that perform comparisons and return boolean\nvalues, such as the keyword |is|. Note that when using |not| in conjunction with\na value, the resulting evaluation will always be |True| or |False|. For example,\n|not 0| is |True|, |0 is not 1| is |True|.""",Kelly,Finalized,1,2,"NotCanCauseErr, NotDoesNothing, ",
Or,"Understands how the ""or"" operator works in Python","""|or| either returns the first true value evaluated in an expression or the last\nvalue of that expression if all the operands are false.""",Kristin,Finalized,1,4,"BoolExprRtnBool, OrDsntShrtCir, OrShrtCirFalsey, SwapAndOr, ",
PrintReturnValue,"What print returns, None, which is displayed as nothing.","""The function |print()| implicitly returns the value of |None|. The Python\ninterpretor does not display |None| unless it is explicitly forced to do so.""",Krishna,Finalized,1,1,"PrntRtnsPrntedVal, ",
PrintString,Understands what print does in the Python interpreter,"""|print()| takes its arguments' values and displays them separated by spaces.\nNote that a string's value is the text between the quotes, thus when printing\nthe quotes are not displayed. For example, printing the string \""Hello World\""\nwill result in the interpreter displaying Hello World (no quotes).""",Krishna,Finalized,1,2,"PrntEndsFn, PrntStrWithQuotes, ",
PrintVsReturn,Understands the difference between what print and return does when in the Python interpreter,"""When a function has a |print()| the arguments are always displayed in the\ninterpreter, but Python continues executing the rest of the function. This\ncontrasts with a |return| statement which ends the function and potentially\ndisplays the return value, depending on how the function was called.""",Krishna,Finalized,1,1,"PrntEndsFn, ",
ShortCircuit,How the boolean operators and and or can stop executing before they reach the end of the boolean expression,"""In short-circuiting Python only cares about false-y values while evaluating an\n|and| expression, and truth-y values while evaluating an |or| expression. A\n|FALSE-Y_VAL and VAL| will always evaluate to |False|, and a\n|TRUTH-Y_VAL or VAL| will always evaluate to |True| so as soon as one of \nthese values is known, the other subexpressions is superfluous, and therefore\nPython does NOT evaluate them.""",Krishna,Finalized,1,5,"AndDsntShrtCir, AndShrtCirTruthy, OrDsntShrtCir, OrShrtCirFalsey, SwapAndOr, ",
Sloppy,The student is being sloppy in some way when executing the code,"""Try:\n1) Reading the code or instructions more carefully,\n2) Writing out the variable's values, or\n3) Drawing an environment diagram.""",,Finalized,1,25,"GenNxtRtnsFirstVal, IfElseIsIfIf, IfIfIsIfElse, InstIsRelatedClass, LambdaMisidentifyRtnVal, OutOfOrderCondVsInc, OutOfOrderRtnVsInc, OutOfOrderStopIterVsInc, OutOfOrderYieldVsInc, PrecogCodeEval, ScmLstIndexOffByOne, SloppyArith, SloppyAttrEval, SloppyCaseDep, SloppyIfCondition, SloppyInc, SloppyIntersect, SloppyLoopCondition, SloppyLstCompMapExp, SloppyNoReadInstructions, SloppyScmLstDisp, SloppySkipLine, SloppySkipPrnt, SloppySort, SloppyVarEval, ",
StringSyntax,"Understands how a string is created and displayed. Created as in using """" and displayed in the interpreter with quotes, e.g. a = 'foo', >>> a --> 'foo'","""In Python, a string is a series of characters. We declare something as a string\nby surrounding it with either single |''| or double quotes |\""\""|. We can\nrecognize strings in the Python interpreter by these quotes. For example: 'This\nis a string' and \""This string's contents has an apostrophe\"".""",Krishna,Finalized,1,1,"StrDsntNeedQuotes, ",
ZeroDivError,Understands that dividing by zero raises an error,"""When dividing by zero, Python raises an error, displays the error, and stops\nrunning the program. This is because dividing by zero mathematically leads to an\nundefined value. So Python cannot compute the value needed to complete its task.\n""",Krishna,Finalized,1,1,"ZeroDivDsntErr, ",
EvalComposedFn,"The steps when having a function call as one of the arguments for another function, i.e. when two functions are composed together","""A function is structured as |OPERATOR(OPERANDS)|. Each OPERAND in OPERANDS must\nbe fully evaluated before applying the OPERATOR to them. When the OPERAND is\nanother function call, this is referred to as function composition. For example,\nto evaluate |fizz(foo(bar(1)))| we first evaluate |bar(1)| as an argument for\n|foo(...)| which in turn is evaluated to become the argument for |fizz(...)|.""",Regina,Finalized,2,1,"ComposedFnIsOneFn, ",
EvalFnCall,"Student understands the different steps to evaluate a function, including if there are nested function calls: 1. Evaluate what is to the left of the () to get the operator, 2. Evaluate each argument to get the operands, and 3. apply the operator to the operands. Also write such that they can understand what happens if there are no arguments.","""A function is structured as |OPERATOR(OPERANDS)|, where OPERANDS is 0 or more\nOPERANDs. To evaluate the function: (1) evaluate the OPERATOR, (2) evaluate each\nOPERAND, and (3) apply the OPERATOR to the OPERANDs.\n\nFor example, in |pow(a, 2)|, where |a = 3|, (1) |pow| is evaluated to get the\nfunction value, (2) |a| evaluates to |3| and |2| is |2|, (3) apply the value of\n|pow| to the two arguments |3| and |2| to get the value |9|.""",Kelly,Finalized,2,5,"ComposedFnIsOneFn, FnCallNeedsArg, FnNameIsFnCall, MismatchArgNoErr, WrnNestedEvalFnCall, ",
EvalStackedFnCall,"The steps when evaluating a stacked set of functions, for example foo()()","""When a function returns another function, a quick way to call the returned\nfunction is to use another set of parentheses. These parentheses have the\nreturned function's arguments. For example, |foo(23)(1, 4)| where |(1, 4)| is\npassed through as the arguments for the function that |foo()| returns.""",Regina,Finalized,2,1,"StackedCallsIsErr, ",
FollowParent,Understands how to find values within the scope of the current frame by following the parent pointers,"""To find the value bound to a variable name |x| Python first looks in the current\nlocal frame environment. If no |x| exists, Python checks next in the parent\nframe, the next parent's frame, so forth until it reaches the Global Frame. If\n|x| is not defined in the Global Frame, a NameError is raised.""",Kelly,Finalized,2,1,"VarValFromCodeNotEnv, ",
FunctionDisplay,What the python interpreter does when displaying a function.,"""A function in Python can be passed around as a value without executing the body.\nWhen the Python interpreter displays a function it uses the format: \n|<function FUNCTION_NAME at LOCATION>|. Additionally, Lambda functions use the \nformat |<function <lambda> at LOCATION>|.""",Regina,Finalized,2,1,"FnDispNothing, ",
LambdaCallExpr,"What happens when a lambda is called. All the steps, including how to identify the different parts of the lambda.","""A lambda is defined as follows: |lambda PARAMETERS: RETURN_VAL|. When a lambda\nis called, the arguments are assigned to the PARAMETERS in the lambda's frame.\nThen the RETURN_VAL is evaluated and returned.""",Hannah,Finalized,2,4,"LambdaCallExprNotCall, LambdaCannotSelfRefer, LambdaMisidentifyRtnVal, LambdaNeedsExplicitRtn, ",
LambdaDefine,The steps taken when a lambda is defined. Specifically what is and is not evaluated at that time.,"""A lambda is defined as follows: |lambda PARAMETERS: RETURN_VAL|. PARAMETERS is 0\nor more parameters and RETURN_VAL is the expression that is evaluated and\nreturned when the lambda is called.""",Regina,Finalized,2,2,"LambdaDefEvalAtDef, LambdaNeedsParam, ",
PrintNone,"Understands that while the interpreter doesn't display None usually, it will display it if printed","""Python will only display |None| when the |print()| displays it. This is because\nthe print function converts the value of its argument into a string and displays\nthe content of that string.""",Regina,Finalized,2,1,"PrntNoneIsWeird, ",
PyInterpreterDisplayNothing,Understands when the Python Interpreter doesn't display anything.,"""The Python interpreter evaluates an expression and displays its output\nimmediately. Evaluations that results in |None| and variable assignments do not\nhave an output, and thus for these statements nothing is displayed in the\ninterpreter.""",Regina,Finalized,2,1,"RtnValNotDisp, ",
ListComp,Understands the different pieces of a list comprehension and the steps to execute them. ,"""The list comprehension format is |[EXPRESSION for ELEMENT in SEQUENCE if\nCONDITIONAL]|, where the |if CONDITIONAL| is optional. For every ELEMENT in\nSEQUENCE where CONDITIONAL is true, evaluate EXPRESSION with ELEMENT and append\nthe result to a list. Return the list when through with SEQUENCE.""",Regina,Finalized,5,4,"LstCompNotRtnLst, LstCompRtnFirstVal, LstCompRtnLastVal, SloppyLstCompMapExp, ",
ListConcat,Understands what happens when concatenating two lists,"""Concatenation is creating a new list from multiple lists, ordering the elements\nby the order of the lists that were summed together.  For example: |[3, 'two',\n1] + [] + [4, 3]| results in |[3, 'two', 1, 4, 3]|""",Regina,Finalized,5,1,"LstConcatIsZipMap, ",
PythonListSyntax,Understands how to use commas to represent lists in Python.,"""A list in Python is contained within square brackets and separated by commas.\nThe elements in the list can be be of any type, including sub-lists. For\nexample: |[1, 2.0, [3, 4], '5', True]|.""",Hannah,Finalized,5,4,"LstDsntNeedBrackets, LstDsntNeedCommas, PyLstSynIsScm, TupIsLst, ",
Range,How to use range and that it goes from 0...n-1,"""In Python, |range(START, STOP)| is used as a means of creating a sequence of\nintegers that begins on START and ends right before STOP, incrementing by 1. If\na START value is not given, START is set to 0. For example, |range(-1, 3)|\niterates through -1, 0, 1, and 2, while |range(3)| iterates through 0, 1, and 2.""",Regina,Finalized,5,1,"RangeIsWeird, ",
DictGetter,Understands how to get a value in a dictionary with the key,"""Python uses a key to get the value from a dictionary. For example, with\n|d = {'a': 1, 'b': 2, 'c': 3}|, in the call |d['b']|, the key |'b'| gets the\ncorresponding value |2|.""",Regina,Finalized,6,1,"DictSetKeyToKey, ",
DictIn,Understands how the `in` keyword for membership works with dictionaries,"""Python uses |in| to check whether a dictionary has a key and returns a boolean\nvalue. For example, with |d = {'a': 1, 'b': 2, 'c': 3}|, the expression\n|'a' in d| returns |True|, while |'z' in d| returns |False|.""",Regina,Finalized,6,1,"DictInIsWeird, ",
Dictionary,"Understands the idea of how a dictionary has keys, which map to values, which means that there can't be duplicate keys","""Dictionaries are unordered sets of key-value pairs that map the key in the pair\nto its value. Since the only way to get a value is with its key, if there are\ntwo key-value pairs with the same key, it is not clear which value should be \nreturned. Therefore dictionary's keys must be unique.""",,Finalized,6,1,"DictCanHaveDupKeys, ",
DictKeys,Understand what the d.keys() function does for a dictionary,"""The |keys()| function returns a sequence of a dictionary's keys. The call\n|sorted(list(DICTIONARY.keys()))| first creates a list from the sequence of keys\nand then sorts it. For example, with |d = {'c': 1, 'a': 2, 'b': 3}|, \n|sorted(list(d.keys()))| returns |['a','b','c']|.""",Regina,Finalized,6,4,"DictKeysRtnDict, DictKeysRtnFirstKey, DictKeysRtnLastKey, DictKeysRtnValues, ",
DictLen,Understands what the len() function returns with dictionaries,"""The length of a dictionary is the number of entries in that dictionary. For\nexample, |{'one': 1, 2: two, 'three': '[1, 2]'}| has a length of 3.""",Regina,Finalized,6,1,"DictLenIsWeird, ",
DictSetter,Understands how to set a value in a dictionary with the key,"""A dictionary maps keys to values. So if a key is not in the dictionary, a new\nentry is created for that key-value pair. If a key is present, its value is\nupdated. For example, with |d = {'John': 'Google'}|, when |d['foo'] = 'bar'| and \n|d['John'] = 'UCB'| are executed, |d|'s value is |{'foo': 'bar', 'John': UCB'}|.""",Regina,Finalized,6,3,"DictCanHaveDupKeys, DictIsInitDict, DictSetKeyToKey, ",
InOperator,"Understands the behavior of the membership keyword |in| with things that are not dictionaries (e.g. lists, sets).","""A usage of the |in| keyword in Python is to check for item membership in a \ncollection. This always returns a boolean value. For example, |4 in {2, 3, 4}|\nwill return |True| and |'hello' in [4, 'hi']| will return |False|.""",,Finalized,6,1,"InRtnValIsNotBool, ",
Intersect,Understands how the intersection function or operator |&| works for sets,"""The intersection operator (shorthand |&|) is used to determine the common\nelements in 2 or more sets. For example, where |s = {1, 3, 5}|, |t = {1, 4, 9}|,\nand |u = {1, 2}|, |s.intersection(t, u)| will return |{1}|.""",,Finalized,6,5,"AmpNotValid, BarIsDiff, BarIsXor, IntersectIsUnion, SloppyIntersect, ",
SetDiff,Understands what happens when taking the difference between one set and others (subtracting),"""The difference operation (shorthand |-|) is used to determine elements that are\nin the first set but not in the other set. For example, where |s = {1, 3, 5}|\nand |t = {1, 2}|, |s.difference(t)| will return |{3, 5}|.""",,Finalized,6,1,"SetDiffIsNotItself, ",
Sets,Understands that a set can't have duplicates,"""A set is a collection of elements that are enclosed by curly braces |{}| and\nadhere to certain properties: elements cannot have duplicates and elements are \nunordered. For example, |{1, 2, 1, 'hello', 4}| results in |{4, 1, 'hello', 2}|.""",,Finalized,6,1,"SetCanHaveDups, ",
SortedFn,Understands what the sorted function does and what it returns,"""The |sorted()| function takes in a collection (e.g. list, set, dictionary) and\nreturns a list of those items in alphanumeric order. For example,\n|sorted({3, 9, 55, 28, -19})| returns the list |[-19, 3, 9, 28, 55]|.""",,Finalized,6,2,"SortedEvalsBool, SortedRtnBadFormatLst, ",
Union,Understands how the union function or operator ||| works for sets,"""The union operation (shorthand |||) is used to create a set of all the elements\npresent in 2 or more sets. For example, where |s = {1, 3, 5}|, |t = {1, 4, 9}|,\nand |u = {1, 2}|, |s.union(t, u)| will return {1, 2, 3, 4, 5, 9}.""",,Finalized,6,1,"UnionIsIntersect, ",
ClassVsInstanceAttr,The difference between looking up an attribute for an instance versus a class.,"""When Python is evaluating an attribute it follows this chain (instance -> class\n-> base-class -> ...). Attribute evaluation can start at either the instance or\nthe class, whichever is on the left side of the dot notation. Python returns the\nattribute value the first time it finds it in the chain.""",Krishna,Finalized,8,1,"InterchangeableClassAndInstAttr, ",
OOPInheritanceAttr,How to look up an attribute from a class that inherits from another.,"""If a subclass does not explicitly have a method or attribute, Python follows the\nchain of base classes until it is found or otherwise raises an error.""",Krishna,Finalized,8,1,"MissingAttrNotInherited, ",
OOPInstanceAttr,How to look up the value of an instance's attribute,"""The value of an attribute is based on the current environment, first looking in\nthe instance, then the instance's class. To access an attribute, Python uses the\nnotation |OBJECT.ATTRIBUTE|.""",Krishna,Finalized,8,4,"AttrIsObj, InstAttrValIsValInConstructor, LnkFirstRtnAsLnk, MissingInstAttrNotInherited, ",
OOPInstanceMethod,"How an instance method works, especially how self is (and needs to be) prefilled in and is not part of the arguments when it is called.","""When a class instance method is called on an instance, |INST.METHOD(...)|,\nPython fills in |self| with a pointer to that instance. When it is called using\nthe class, |CLASS.METHOD(INST, ...)|, |self| must be provided.""",Krishna,Finalized,8,1,"MethodCallNotBoundToInst, ",
IsOperator,how the `is` operator works,"""The |is| operator returns a boolean of whether two values are exactly the same\nobject instance. For example, if |a = [1, 2]|, |b = a|, and |c = [1, 2]|,\n|a is c| will return |False|, while |a is b| will return |True|.""",Krishna,Finalized,9,1,"IsRtnValIsNotBool, ",
IteratorIter,Understands the purpose and functionality of __iter__,"""The Python iterator interface requires an |__iter__| method. This must return an\niterable object, usually the current object |self|. |__iter__| is special and is\ncalled with |iter(ITER)|.""",Hannah,Finalized,9,4,"IterCantJustRtnSelf, IterMustRtnNewInst, IterMustRtnSelf, ItrDsntNeedIter, ",
IteratorNext,Understands when is next called and how its called,"""The Python iterator interface requires a |__next__| method. It returns the\nsubsequent element of the sequence by executing the code in the method.\n|__next__| is special and is called with |next(ITER)|.""",Kelly,Finalized,9,6,"ItrDsntNeedNxt, NxtRtnsFirstVal, OutOfOrderRtnVsInc, OutOfOrderStopIterVsInc, StopIterRequiredInNxt, StopIterRtnRecentVal, ",
IteratorNextStop,Understands how calling next again after a stop iteration behaves,"""Once a StopIteration is raised, each subsequent call to the |__next__| method\nconventionally raises a StopIteration again (technically it depends on the code\nin the |__next__| method).""",Hannah,Finalized,9,2,"StartsOverAfterStopIter, StopIterCont, ",
Correct,Typoed correct answer,"""Typo?""",,Finalized,#N/A,0,#N/A,
LinkDefine,Explain the two attributes of a Link and what they are for,"""A linked list is made up of Link objects that each have two attributes, |first|\nand |rest|. |first| contains the element inside the Link, while |rest| refers to\nthe next Link object in the list.""",Krishna,Finalized,9,2,"LnkFirstRtnAsLnk, SloppyLnkAttrEval, ",
LinkEmpty,Understands what Link.empty represents and how it does not necessarily point to itself,"""|Link.empty| represents an empty linked list and is used to mark the end a list.\nThus it does not have any attributes of a link object. For example, if\n|l = Link(1, Link(2))| then |l.rest.rest == Link.empty| is true.""",Krishna,Finalized,9,1,"LnkEmptyRestValIsLnkEmpty, ",
LinkOOPGetter,Understands how to get the values of first and rest,"""The |first| attribute of a |Link| object has the link's value, while the |rest|\nattribute is a pointer to the next link or |Link.empty|. Keep in mind the value\nof any attribute can be anything (even a pointer to itself).""",Krishna,Finalized,9,2,"LnkAttrAccessRtnLnkAccessCode, LnkLstCantCycle, ",
LinkSetter,Understands that first and rest can be reassigned,"""A Link object is mutable, therefore the instance attributes |first| and |rest|\ncan be modified. For example, if |l = Link(1)|, with |l.first = 9| and\n|l.rest = Link(3)|, |l| becomes |Link(9, Link(3))|.""",Krishna,Finalized,9,1,"LnkIsInitLnk, ",
StopIterationError,When is the StopIteration error raised and how is it handled generally,"""The |StopIteration| error is raised when the iterator has no more return values.\nA Python |for| loop automatically catches this error. However, if a |for| loop\nis not used, an explicit |try...except| is needed.""",,Finalized,9,1,"ForLoopDsntCatchStopItrErr, ",
SchemeCar,Understands car in scheme and its output,"""|car| returns the first value of a pair from either a regular or malformed list.\nThis value can be of any type. For example, |(car '(1 2 3))| returns |1|,\n|(car '(1 . 2))| returns |1|, and |(car '((1 2) 3))| returns |(1 2)|.""",Kristin,Finalized,10,1,"ScmSwapCarCdr, ",
SchemeCdr,Understands cdr in scheme and its output,"""|cdr| returns the second value of a pair. With a linked list, |cdr| returns a\npointer to the next pair but with a malformed list, |cdr| returns a value. For\nexample, |(cdr '(1 2 3))| returns |(2 3)| and |(cdr '(1 . 2))| returns |2|.""",Kristin,Finalized,10,3,"ScmCdrRtnLstElem, ScmCdrRtnLstSubset, ScmSwapCarCdr, ",
SchemeCons,"Understands cons in scheme, specifically how it needs two parameters and the difference between consing with a list vs not a list","""|cons| takes two arguments to form a pair, like a link in link lists. Also like\nlink lists, conventionally the second value of the pair is another pair. If the\nsecond value is not a list, a malformed list is created. For example:\nscm> (cons 1 (cons 2 ()))   +-------+  +-------+  |  scm> (cons 1 2)   +-------+\n(1 2)                       | 1 | x -->| 2 | \ |  |  (1 . 2)           | 1 | 2 |\n                            +-------+  +-------+  |                    +-------+""",Kristin,Finalized,10,4,"ScmConsRtnLstWhenShouldBeMalLst, ScmConsWithLstMakesMalLst, ScmConsWithLstMakesNestedLst, ScmNestedLstIsFlat, ",
SchemeDefine,Understands the output when a symbol is defined in scheme,"""|define| has two formats: |define (PROC_NAME PARAMETERS) PROC_BODY| and\n|define VAR VAL|. The first creates a procedure called PROC_NAME that runs\nPROC_BODY using PARAMETERS. The second assigns VAL to the name VAR. When a\nprocedure or variable is defined, its name is displayed in the interpreter.""",Kristin,Finalized,10,3,"ScmBindVarToVarName, ScmDefRtnNotName, ScmDefVarIsFn, ",CAPITALIZE <stuff>
SchemeEmpty,"Understands what an empty list looks like in scheme, could be `'()` or `nil`.","""The empty list in Scheme, |()| or |nil|, denotes the end of a list, like Python\nlink lists. |null?| returns whether a value is the empty list. The empty list is\nconsidered a list, but not a pair so using |car| or |cdr| on it causes an error.""",Kristin,Finalized,10,2,"ScmDispNilInLst, ScmNilNotLst, ",
SchemeEvalVar,"Understands how to evaluate variables when they are used in scheme, probably similar to the message for EvalVar","""In Scheme, a variable is evaluated to the value it was assigned using |define|.\nIf it was not assigned prior to being evaluated, an error is raised.""",,Finalized,10,1,"ScmBindVarToVarName, ",
SchemeListFormat,Understands how to reduce a scheme list into it's most reduced version and how scheme displays a list when outputed,"""To display a list, surround each pair with |()| and separate its values with a\n|.| surrounded by spaces. For each |.| immediately followed by a |(|, remove the\n|.| and matching |()|. For example, |(cons 1 (cons (cons 2 3) (cons 4 ())))|\nbecomes |(1 . ((2 . 3) . (4 . ())))| and reduces to |(1 (2 . 3) 4)|.""",,Finalized,10,8,"ScmDispNilInLst, ScmLstDispNotFullyReduced, ScmLstDsntNeedOuterParen, ScmLstIsNestedLst, ScmLstReductionMisapplied, ScmLstRtnAsCode, ScmMalLstDsntNeedSpaces, SloppyScmLstDisp, ",
SchemeListFunction,Understands how `list` constructs a Scheme list,"""|list| takes zero or more arguments and returns a list with each argument as an\nelement in the list. For example:\nscm> (list 1 2 3)    +-------+  +-------+  +-------+\n(1 2 3)              | 1 | x -->| 2 | x -->| 3 | \ |\n                     +-------+  +-------+  +-------+""",Kristin,Finalized,10,4,"ScmListFnMakesMalLst, ScmLstDsntNeedSpaces, ScmNestedLstIsFlat, ScmSingleItemNestedLstIsLst, ",
SchemeMalformedList,Understands a malformed Scheme list is the pair where rest is not a list and is displayed by a dot. (e.g. `(3 . 4)` instead of `(3 4)`.,"""A list is malformed if the second value of a pair is not another pair. A |.| is\nused to separate the two values of the pair. For example, |(cons 1 (cons 2 3))|\nevaluates to the malformed list |(1 (2 . 3))|.""",,Finalized,10,2,"ScmConsRtnLstWhenShouldBeMalLst, ScmMalLstIsLst, ",
SchemeQuotedList,Understands how to create a list using quote in scheme,"""|quote| or |'| acts as shorthand to create a list with the list display syntax.\nAnything in the list becomes symbolic and is therefore not evaluated. For\nexample, |(quote (1 2 3))| creates |(1 2 3)| and |'(1 . 2)| creates |(1 . 2)|,\nwhile |'(cons 1 2)| creates |(cons 1 2)| where |cons| here is the symbol |cons|.""",,Finalized,10,4,"ScmNestedLstIsFlat, ScmQuotedCodeIsEval, ScmQuotedLstNotRtnLst, ScmQuotedLstRtnNotOrgLst, ",
Equals,How two values are checked if they are equal using | == |,"""In Python, we use |==| to compare the equality of two values. For example if\n|foo = 0|, |foo == 0| checks to see if |foo| has the value |0| which would\nresult in a boolean evaluation.""",Krishna,Finalized,13,2,"AssignStmtIsEquals, EqualityRtnValIsNotBool, ",
GeneratorIter,Understands how the __iter__ method of a generator behaves and is used,"""Like all iterators, generator objects have an |__iter__| method. This implicit\nmethod always returns the current generator, a.k.a. |self|.""",,Finalized,13,2,"GenIterRunsFn, ImplicitGenIterDsntRtnSelf, ",
GeneratorNext,Understands how the next element in a generator is accessed,"""A generator remembers its environment frame and its previous location. The\ninitial values are an empty frame and the \""previous location\"" is the function\nbeginning. When |next| is called, it loads the saved frame, starts evaluating\nfrom its previous location, and runs until it hits the next |yield|.""",,Finalized,13,2,"GenNxtRtnsFirstVal, GenSubseqNxtActsLikeFirstNxt, ",
GeneratorYield,Understands the behavior of yield in a generator,"""A generator is a function that uses |yield|. Upon reaching a |yield| during an \niteration, Python returns the evaluation of the statement and stores the state \nof the current frame for when the generator needs to return the next value.""",.,Finalized,13,5,"GenLoopRestartsAtFnStart, OutOfOrderYieldVsInc, YieldDsntRtnValAndHalt, YieldIsContNotRtn, YieldRestartsAtLoopStart, ",
ArithOrderOfOp,Order of operations for arithmetic,"""In Mathematics, and thus in Python, arithmetic evaluation follows the order of\noperations commonly known as PEMDAS, which stands for ""Parentheses, Exponents,\nMultiplication/Division, and Addition/Subtraction"" and is evaluated from left\nto right. For example the expression |4 + 2 - 4 * 3 / 4 + 2**2| will be\nevaluated as |((4 + 2) - ((4 * 3) / 4)) + (2**2)| or |7.0|.""",Krishna,Finalized,#N/A,1,"WrnArithOpPrecedence, ",
ClassAttrDef,"How class attributes can be defined, which can be done both in the class definition or simply added to the class object later","""A class attribute can be defined either within the |def| of the class or by\nassigning a value to a new attribute with dot notation after the creation of\nthe class, |CLASS.ATTR = VAL|.""",Krishna,Finalized,#N/A,1,"AttrMustBeDefInClassDef, ",
ListCasting,Understands what the output is when casting something to a list,"Various objects such as string, sequences, lists, sets, and dictionaries can be ""converted"" into a list object type by the way of casting. | list(obj) | would cast an object named |obj| into a list.",Regina,,#N/A,1,"LstCastIsntLst, ",
RaiseError,Understands what happens when an error is raised. As in how the error stops execution and goes up the stack looking for a try...except. If it doesn't find one it displays itself in the python interpreter,,,,#N/A,1,"ErrRaisedIsRtnVal, ",
Return,Understands that a return ends a function and is the keyword used to evaluate what the function's return value is,,,,#N/A,1,"RtnDsntEndFn, ",
SchemeAssignment,"Understands how to do assignment in scheme, probably similar to the Assignment concept",,,Needs Review,#N/A,0,#N/A,
SchemeCond,Understands how a `cond` procedure is evaluated,,,,#N/A,0, ,
SchemeEquals,Understands what the '=' operator means in scheme,,,,#N/A,0,#N/A,
SchemeFalseyVal,Understands that False is the only falsey value in Scheme,"""In Scheme, the only false-y value is |False|.""",,Needs Review,#N/A,1,"ScmFalseNilInterchangeable, ",
SchemeFunctionCall,"Understands how a scheme function is called, what its arguments are",,,,#N/A,0,#N/A,
SchemeIf,Understands how an `if` procedure is evaluated,,,,#N/A,0,#N/A,
SchemeLambda,Understands how a `lambda` procedure is defined and evaluated,,,,#N/A,0,#N/A,
SchemeNil,Understands that nil is another way to reference the empty list and so it evaluates to true.,"""In Scheme, |nil| refers to the empty list, |()|. Unlike Python, it is considered\na truth-y value.""",,Needs Review,#N/A,1,"ScmFalseNilInterchangeable, ",
SchemePrefix,Student understands prefix notation when it comes to the arguments in a scheme expression,"""In Scheme, call expressions follow a prefix notation, where an operator is followed\nby zero or more operand subexpressions. Operators may be symbols, such as\n\'+\' or \'*\', or procedure names such as | list |.\n\nFor example | (- 1 2 3) | is arithmetically evaluated as ((1 - 2) - 3).""",Kristin,Needs Review,#N/A,2,"ScmEvalRightToLeft, ScmMathProcReqTwoArgs, ","Scheme expressions use prefix notation within parenthesis |(OPERATOR OPERANDS)|. There are zero or more OPERANDS and each OPERAND must be fully evaluated before applying the OPERATOR. Operators may be symbols (ex: |+|) or procedure names (ex: |list|). For example, |(- 1 2 (+ 3 4))| is evaluated as ((1 - 2) - (3 + 4))."
SchemeQuotedSymbol,"Understands that with a Scheme quote, the expression won't be evaluated and will be returned as data / symbol / literal value","""In Scheme, any expression that is not evaluated is quoted, making it symbolized.\n\n> (define b 3)\nb\n> (define a 'b)\na\n> a\nb ; Notice a is not 3\n\nQuotation also allows us to construct a list of quoted elements, using the\nconventional printed representation for lists. For example, | '(a b c) | returns\na list (a b c).""",Kristin,Needs Review,#N/A,1,"ScmQuoteVal, ","Quoting a value, |('VAL)| or |(quote VAL)|, returns the symbolic version of it.
scm> (define b 3)
b
scm> (define a 'b)
a
scm> a
b  ; The value is not 3"
SchemeStream,"Understands the constructor and selectors/evaluators of a Scheme stream, what delayed evaluation is",,,,#N/A,0,#N/A,
SchemeSyntax,Understands how to use use of parenthesis and spaces to represent a Scheme list or call a procedure,"""In Scheme, lists and procedure calls are surrounded by parenthesis. Additionally,\nthe elements of a list and the procedure name and arguments are separated by\nspaces.\n\nIn general, the rule for displaying a pair is as follows: use the dot to\nseparate the | car | and | cdr | fields of a pair, but if the dot is immediately\nfollowed by an open parenthesis, then remove the dot and the parenthesis pair.\n\nFor example, (0 . (1 . 2)) becomes (0 1 . 2)""",Kristin,Needs Review,#N/A,1,"ScmArgsNotUseSpaces, ",
SchemeWellformed,Understands that a well formed list is a linked list that has a first and a rest,"For a Scheme list to be well-formed, the car field of a list element is either a primitive, symbol, or a well-formed list. The cdr field is either a well-formed list or nil.",,,#N/A,0,#N/A,
StringConcatentation,"Understands that string concatenation with | + | can only be done with strings, as opposed to a string + int",,,,#N/A,1,"NoneConcatsAsEmptyStr, ",
TreeDisplay,How a Tree instance is displayed in the Python interpreter,,,,#N/A,2,"TreeChildrenNotInLst, WrnTreeDisp, ",
TreeHeight,How the height of a tree is calculated.,,,,#N/A,1,"TreeHeightStartsAtOne, ",
TreeImplementation,How a Tree is implemented where it has a value/entry and a list of it's children/branches. (double check semseter's chosen vernacular),,,,#N/A,1,"TreeChildrenNotInLst, ",
TupleVsList,Understands the difference between tuples and lists in terms of their syntax and how one is mutable but not the other,,,,#N/A,1,"TupIsLst, ",